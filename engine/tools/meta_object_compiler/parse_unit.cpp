#include "parse_unit.hpp"
#include "parse_utils.hpp"

namespace Engine
{
    void ParseUnit::Parse()
    {
        ParseMetaData(MyCursor, Flags, MetaData);
    }

    void ParseUnit::ParseMetaData(CXCursor cursor, Set<String>& flags, Map<String, String>& metaDataMap)
    {
        String unparseAttributes = ParseUtils::GetUserDeclareAttribute(cursor);
        if (unparseAttributes.Empty())
        {
            return;
        }

        Set<String> supportFlags = GetSupportFlags();

        Array<String> groups = unparseAttributes.Split(',', SkipEmptyParts);
        for (auto&& group : groups)
        {
            if (!group.Contains('='))
            {
                String flag = group.Trimmed();
                if (!flag.Empty() && supportFlags.Contains(flag))
                {
                    flags.Add(std::move(flag));
                }
            }
            else
            {
                Array<String> values = group.Split('=');
                if (values.Size() == 2)
                {
                    String key = values[0].Trimmed();
                    String value = values[1].Trimmed();
                    value.Remove('"');
                    if (!key.Empty() && !value.Empty())
                    {
                        metaDataMap.Add(std::move(key), std::move(value));
                    }
                }
            }
        }
    }

    String ParseUnit::MetaFlagsToString() const
    {
        if (Flags.Empty())
        {
            return "MF_None";
        }

        String ret;
        bool isFirstFlag = true;
        for (auto&& flag : Flags)
        {
            if (isFirstFlag)
            {
                ret.Append(String::Format("MF_{}", flag));
                isFirstFlag = false;
            }
            else
            {
                ret.Append('|').Append(String::Format("MF_{}", flag));
            }
        }

        return ret;
    }

    String ParseUnit::MetaDataToString() const
    {
        String ret = '{';

        bool isFirstMapElement = true;
        for (auto&& pair : MetaData)
        {
            if (isFirstMapElement)
            {
                ret.Append(String::Format("{{\"{0}\", \"{1}\"}}", pair.Key, pair.Value));
                isFirstMapElement = false;
            }
            else
            {
                ret.Append(String::Format(", {{\"{0}\", \"{1}\"}}", pair.Key, pair.Value));
            }
        }
        ret.Append('}');
        return ret;
    }

    void RecordUnit::Parse()
    {
        Super::Parse();

        CX_ASSIGN_STRING_EXPR(RecordName, clang_getCursorSpelling(MyCursor));
        ParseUtils::PrettyTypeName(RecordName);
    }

    String RecordUnit::GetGeneratedHead() const
    {
        return R"(/**
 * This code was generated by MetaObjectCompiler.
 * DO NOT modify this manually!
 */

#pragma once

#include "object_register.hpp"
#include "meta_macro.hpp")";
    }

    String RecordUnit::GetGeneratedSource() const
    {
        return R"(/**
 * This code was generated by MetaObjectCompiler.
 * DO NOT modify this manually!
 */
)";
    }
}